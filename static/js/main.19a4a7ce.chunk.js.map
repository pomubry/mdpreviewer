{"version":3,"sources":["markdown.svg","App.js","serviceWorker.js","index.js","githubIcon.svg"],"names":["module","exports","initialMarkdown","App","state","markdown","hidden","handleChange","e","target","name","value","setState","handleHide","prevState","__html","DOMPurify","sanitize","marked","this","breaks","textarea","display","editorHeight","height","className","style","src","alt","onClick","id","onChange","cols","rows","dangerouslySetInnerHTML","getMarkdownText","href","rel","github","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,sC,iPCMrCC,EAAe,qtBA+GNC,E,4MA3EbC,MAAQ,CACNC,SAAUH,EACVI,QAAQ,G,EAWVC,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAlBC,EADY,EACZA,KAAMC,EADM,EACNA,MACd,EAAKC,SAAL,eACGF,EAAOC,K,EAIZE,WAAa,SAACL,GACZ,EAAKI,UAAS,SAACE,GAAD,MAAgB,CAC5BR,QAAQQ,EAAUR,Y,gEAZpB,MAAO,CAAES,OALOC,IAAUC,SACxBC,IAAOC,KAAKf,MAAMC,SAAU,CAC1Be,QAAQ,Q,+BAoBZ,IAAMC,EAAWF,KAAKf,MAAME,OACxB,CAAEgB,QAAS,QACX,CAAEA,QAAS,SACTC,EAAeJ,KAAKf,MAAME,OAC5B,CAAEkB,OAAQ,OACV,CAAEA,OAAQ,SAEd,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SAASC,MAAOH,GAC7B,yBAAKE,UAAU,WACb,yBAAKE,IAAKtB,IAAUuB,IAAI,aAD1B,SAEE,4BAAQC,QAASV,KAAKN,YAAtB,SAEF,8BACEiB,GAAG,SACHpB,KAAK,WACLC,MAAOQ,KAAKf,MAAMC,SAClB0B,SAAUZ,KAAKZ,aACfyB,KAAK,KACLC,KAAK,OACLP,MAAOL,KAGX,yBAAKI,UAAU,WACb,yBAAKE,IAAKtB,IAAUuB,IAAI,aAD1B,aAGA,yBACEH,UAAU,YACVK,GAAG,UACHI,wBAAyBf,KAAKgB,oBAEhC,yBAAKV,UAAU,WACb,oDACA,uBACEW,KAAK,6BACL3B,OAAO,SACP4B,IAAI,uBAEJ,yBAAKV,IAAKW,IAAQV,IAAI,gBALxB,uB,GA9DQW,aC7BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B3D,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.19a4a7ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/markdown.3440b7a0.svg\";","import React, { Component } from 'react';\nimport marked from 'marked';\nimport DOMPurify from 'dompurify';\nimport markdown from './markdown.svg';\nimport github from './githubIcon.svg';\n\nconst initialMarkdown = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\n* This is a bulleted list\n* Great for shopping lists\n* You can also use hyphens\n* Or plus symbols\n\n![React Logo](https://reactjs.org/logo-og.png)\n\n`;\n\nclass App extends Component {\n  state = {\n    markdown: initialMarkdown,\n    hidden: false,\n  };\n  getMarkdownText() {\n    let rawMarkup = DOMPurify.sanitize(\n      marked(this.state.markdown, {\n        breaks: true,\n      })\n    );\n    return { __html: rawMarkup };\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleHide = (e) => {\n    this.setState((prevState) => ({\n      hidden: prevState.hidden ? false : true,\n    }));\n  };\n\n  render() {\n    const textarea = this.state.hidden\n      ? { display: 'none' }\n      : { display: 'block' };\n    const editorHeight = this.state.hidden\n      ? { height: '0px' }\n      : { height: '240px' };\n\n    return (\n      <div className=\"App\">\n        <div className=\"editor\" style={editorHeight}>\n          <div className=\"prevTab\">\n            <img src={markdown} alt=\"markdown\"></img>Editor\n            <button onClick={this.handleHide}>Hide</button>\n          </div>\n          <textarea\n            id=\"editor\"\n            name=\"markdown\"\n            value={this.state.markdown}\n            onChange={this.handleChange}\n            cols=\"40\"\n            rows=\"auto\"\n            style={textarea}\n          />\n        </div>\n        <div className=\"prevTab\">\n          <img src={markdown} alt=\"markdown\"></img>Previewer\n        </div>\n        <div\n          className=\"previewer\"\n          id=\"preview\"\n          dangerouslySetInnerHTML={this.getMarkdownText()}\n        />\n        <div className=\"credits\">\n          <p>Designed and Coded By</p>\n          <a\n            href=\"https://github.com/pomubry\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={github} alt=\"github icon\" />\n            Bryan Taduran\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/githubIcon.0a3a0978.svg\";"],"sourceRoot":""}